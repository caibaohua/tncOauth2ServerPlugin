<?php
/**
 * You can add the following setting into app/some_application/config/filters.yml
 * to active TncOauth2SecurityFilter.php. And the actions will check oauth.yml
 * before it is executed
 *
 * oauth:
 *   class: TncOauth2SecurityFilter
 *   file:  %SF_PLUGINS_DIR%/tncOauth2ServerPlugin/lib/filter/TncOauth2SecurityFilter.php
 *   param:
 *     type: oauth
 *
 *
 * @author  The NetCircle
 * @version TncOauth2ServerConfigFilterHandler.php created_at: 13-3-11 - caibaohua
 */
class TncOauth2ServerConfigFilterHandler extends sfFilterConfigHandler
{
  const FILTER_TYPE = 'oauth';


  /**
   * @param array $configFiles
   *
   * @return string
   * @throws sfParseException
   *
   * @see sfFilterConfigHandler::execute
   */
  public function execute($configFiles)
  {
    // parse the yaml
    $config = self::getConfiguration($configFiles);

    // init our data and includes arrays
    $data     = array();
    $includes = array();

    $execution = false;
    $rendering = false;

    // let's do our fancy work
    foreach ($config as $category => $keys)
    {
      if (isset($keys['enabled']) && !$keys['enabled'])
      {
        continue;
      }

      if (!isset($keys['class']))
      {
        // missing class key
        throw new sfParseException(sprintf('Configuration file "%s" specifies category "%s" with missing class key.', $configFiles[0], $category));
      }

      $class = $keys['class'];

      if (isset($keys['file']))
      {
        if (!is_readable($keys['file']))
        {
          // filter file doesn't exist
          throw new sfParseException(sprintf('Configuration file "%s" specifies class "%s" with nonexistent or unreadable file "%s".', $configFiles[0], $class, $keys['file']));
        }

        // append our data
        $includes[] = sprintf("require_once('%s');\n", $keys['file']);
      }

      $condition = true;
      if (isset($keys['param']['condition']))
      {
        $condition = $keys['param']['condition'];
        unset($keys['param']['condition']);
      }

      $type = isset($keys['param']['type']) ? $keys['param']['type'] : null;
      unset($keys['param']['type']);

      if ($condition)
      {
        // parse parameters
        $parameters = isset($keys['param']) ? var_export($keys['param'], true) : 'null';

        // append new data
        if ('security' == $type)
        {
          $data[] = $this->addSecurityFilter($category, $class, $parameters);
        }
        elseif (self::FILTER_TYPE == $type)
        {
          $data[] = $this->addOauthSecurityFilter($category, $class, $parameters);
        }
        else
        {
          $data[] = $this->addFilter($category, $class, $parameters);
        }

        if ('rendering' == $type)
        {
          $rendering = true;
        }

        if ('execution' == $type)
        {
          $execution = true;
        }
      }
    }

    if (!$rendering)
    {
      throw new sfParseException(sprintf('Configuration file "%s" must register a filter of type "rendering".', $configFiles[0]));
    }

    if (!$execution)
    {
      throw new sfParseException(sprintf('Configuration file "%s" must register a filter of type "execution".', $configFiles[0]));
    }

    // compile data
    $retval = sprintf("<?php\n".
        "// auto-generated by TncOauth2ServerConfigFilterHandler\n".
        "// date: %s\n%s\n%s\n\n", date('Y/m/d H:i:s'),
      implode("\n", $includes), implode("\n", $data));

    return $retval;
  }


  /**
   * Adds a Oauth security filter statement to the data.
   *
   * @param string $category   The category name
   * @param string $class      The filter class name
   * @param array  $parameters Filter default parameters
   *
   * @return string The PHP statement
   */
  protected function addOauthSecurityFilter($category, $class, $parameters)
  {
    return <<<EOF
\$oauthInstance= new TncOauth(sfContext::getInstance(),\$actionInstance->getModuleName(),\$actionInstance->getActionName());
if (\$oauthInstance->isOauthSecure())
{
  {$this->addFilter($category, $class, $parameters)}
}
EOF;
  }

}
